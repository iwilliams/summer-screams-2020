[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode cull_back, skip_vertex_transform;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;
uniform sampler2D alphaTex : hint_albedo;
uniform float snap_scale = 35;

varying vec4 vertex_coordinates;
//Geometric resolution for vert sna[
uniform float snapRes = 50.0;
uniform float cull_distance = 30;


void vertex() {
    VERTEX = (MODELVIEW_MATRIX * vec4(VERTEX, 1.0)).xyz;
    VERTEX.xyz = floor(VERTEX.xyz * snapRes) / snapRes;
    float vertex_distance = length((MODELVIEW_MATRIX * vec4(VERTEX, 1.0)));

//	float vPos_w = (PROJECTION_MATRIX * vec4(VERTEX, 1.0)).w;
//	VERTEX.xy = vPos_w * floor(resolution * VERTEX.xy / vPos_w) / resolution;
	vertex_coordinates = vec4(UV * VERTEX.z, VERTEX.z, .0);

	if (!OUTPUT_IS_SRGB) {
		COLOR.rgb = mix( pow((COLOR.rgb + vec3(0.055)) * (1.0 / (1.0 + 0.055)), vec3(2.4)), COLOR.rgb* (1.0 / 12.92), lessThan(COLOR.rgb,vec3(0.04045)) );
	}
	UV=UV*uv1_scale.xy+uv1_offset.xy;
    UV.x = UV.x - .2 * TIME;
    
	if (vertex_distance > cull_distance)
		VERTEX = vec3(.0);
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	albedo_tex *= COLOR;
	ALBEDO = albedo.rgb * albedo_tex.rgb * mix(.6, 1., texture(alphaTex, UV).r);
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
    vec4 alpha_tex = texture(alphaTex, UV);
    EMISSION = vec3(mix(.1, .6, alpha_tex.r * ALBEDO.r), 0., 0.);
//    ALPHA = mix(.7, .9, texture(alphaTex, UV).r);
}
"

[sub_resource type="OpenSimplexNoise" id=2]

[sub_resource type="NoiseTexture" id=3]
noise = SubResource( 2 )

[resource]
shader = SubResource( 1 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/snap_scale = 35.0
shader_param/snapRes = 50.0
shader_param/cull_distance = 30.0
shader_param/alphaTex = SubResource( 3 )
